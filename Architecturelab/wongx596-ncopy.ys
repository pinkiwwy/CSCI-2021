#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Name: Wing Yi Wong      ID: wongx596
#
# Describe how and why you modified the baseline code.
#
# The file is modified to reduce its original runtime.
# 1. Replace irmovq and addq with iaddq in order to trim extra
#    instruction.
# 2. Implement loop unrolling to reduce overhead from incrementing the memory#    address of src and dst.
# 3. Reorder some functions.
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
  # Loop header
  xorq %rax, %rax      # count = 0
  iaddq $-6, %rdx      
  jl Remain             

Loop:  mrmovq (%rdi), %r10   # read val from src...
       mrmovq 8(%rdi), %r11  # read next val from src...
       rmmovq %r10, (%rsi)   # ...and store it to dst
       andq %r10, %r10       # <= 0?
       jle Npos0             # if so, go to Npos0:
       iaddq $1, %rax        

Npos0: rmmovq %r11, 8(%rsi)  
       andq %r11, %r11       # <= 0?
       jle Npos1             # if so, go to Npos1
       iaddq $1, %rax

Npos1:	mrmovq 16(%rdi), %r10   
	mrmovq 24(%rdi), %r11   
	rmmovq %r10, 16(%rsi)   
	andq   %r10, %r10       # <= 0?
	jle    Npos2            # if so, go to Npos2
	iaddq  $1, %rax         

Npos2:  rmmovq %r11, 24(%rsi)   
	andq   %r11, %r11       # <= 0?
	jle    Npos3            # if so, go to Unroller
        iaddq  $1, %rax          

Npos3:  mrmovq 32(%rdi), %r10   
	mrmovq 40(%rdi), %r11   
	rmmovq %r10, 32(%rsi)   
	andq   %r10, %r10       # <= 0?
	jle    Npos4            # if so, go to Npos4
	iaddq  $1, %rax         

Npos4:  rmmovq %r11, 40(%rsi)   
	andq   %r11, %r11       # <= 0?
	jle    Unroller         # if so, go to Unroller
        iaddq  $1, %rax         

Unroller:
	iaddq $48, %rdi         
	iaddq $48, %rsi         
	iaddq $-6, %rdx         
        jge   Loop              # Unrolling

Remain:
	iaddq $6, %rdx          # Set len to the correct value

Remain0:
	iaddq  $-1, %rdx        # len--
	jl     Done             # Done if no remain parts
	mrmovq (%rdi), %r10     
        mrmovq 8(%rdi), %r11    
     	rmmovq %r10, (%rsi)     
   	andq   %r10, %r10       # <= 0?
  	jle    Remain1          # if so, go to Remain 1
  	iaddq  $1, %rax         

Remain1:
	iaddq  $-1, %rdx        # len--
	jl     Done             # Done if no remain parts
	rmmovq %r11, 8(%rsi)    
        andq   %r11, %r11       # <= 0?
    	jle    Remain2          # if so, go to Remain2
    	iaddq  $1, %rax         

Remain2:
	iaddq  $-1, %rdx        # len--
	jl     Done             # Done if no remain parts
	mrmovq 16(%rdi), %r10   
     	mrmovq 24(%rdi), %r11   
     	rmmovq %r10, 16(%rsi)   
    	andq   %r10, %r10       # <= 0?
  	jle    Remain3          # if so, go to Remain3
 	iaddq  $1, %rax         

Remain3:
	iaddq  $-1, %rdx        # len--
	jl     Done	        # Done if no remain parts
	rmmovq %r11, 24(%rsi)   
     	andq   %r11, %r11       # <= 0?
	jle    Remain4          # if so, go to Remain4
   	iaddq  $1, %rax 

Remain4:
	iaddq  $-1, %rdx        # len--
	jl     Done             # Done if no remain parts
	mrmovq 32(%rdi), %r10   
    	rmmovq %r10, 32(%rsi)   
    	andq   %r10, %r10       # <= 0?
   	jle    Done             # if so, Done
  	iaddq  $1, %rax         

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
  ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */

